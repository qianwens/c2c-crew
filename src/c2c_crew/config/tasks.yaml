file_structure_analyze_task:
  description: >
    Review the code file structure in {folder} to identify the services' main project folder with the project programming language, main code files, configuration files, and dependency files.
    Main code files are the files that contain the main functions of the service or contains the files that initialize the service dependencies.
    You should use your expertise to reasoning based on the file structure and the file name.
  expected_output: >
    A list of services with the main project folder, the programming language, the full path of main code files, the full path of configuration files, and the full path of dependency files.
  agent: code_analyst

service_code_analyze_task:
  description: >
    Review the service's main code files {mainFiles} to identify the main functions of the service.
    Generate a service name and description based on the main functions.
  expected_output: >
    An object with the service name and description.
  agent: code_analyst

environment_variables_detect_task:
  description: >
    Review the service's configuration files {configFiles} and main source code files {mainFiles} to identify the environment variables needed to run the service.
  expected_output: >
    A list of environment variables with the key name, description, and default value. 
    The key name should be exactly the same as the environment variable name in the code.
    If there is second level environment variables, consider the project language and framework to decide the key name.
  agent: code_analyst

dependencies_detect_task:
  description: >
    Review the service's main code files {mainFiles} and dependency files {dependencyFiles} to identify the dependent services needed to run the service.
    Example dependent services are databases, message queues, and other services.
  expected_output: >
    A list of dependent services with the service name, service type.
  agent: code_analyst

dependencies_analyze_task:
  description: >
    Given the dependent service list and the environment variables, analyze the dependent services to identify the required environment variables for each service.
  expected_output: >
    A list of dependent services with the service name and required environment variables.
  agent: code_analyst

error_code_search_task:
  description: >
    Given the code search rule, search the code base to identify the code that might cause the error.
  expected_output: >
    Code snippet and the line number of the error code.
  agent: code_analyst

azure_services_recommend_task:
  description: >
    Given the service types, recommend azure services that can be used to implement the services.
  expected_output: >
    A list of services with the service name and the recommended azure service type.
  agent: azure_architect

error_message_analyze_task:
  description: >
    Review the error message to identify the root cause of the issue. 
    The error can be caused by the code logic, or the environment configuration. 
    You should carefully check if the error message is caused by the incorrect deploy architecture first.
    You should take the error message as the input and analyze the code and the deploy architecture to find the root cause.
    Possible deployment problems include incorrect environment variables, incorrect dependent services, or incorrect service configuration.
  expected_output: >
    An report of the error message, the root cause, and the solution.
  agent: error_analyst

customer_support_task:
  description: >
    The user has a question about deploying the service to the cloud. The project folder is {folder} and the bicep folder is {bicep}.
    Given the user's question {question}, find the right agent to solve the issue and provide the solution to customer.
    You should provide sufficient and comprehensive information to the agent including the project folder, deploy architecture, and the user's question.
    For the runtime exception, you should ask error_analyst to help diagnostic the error message and ask bicep_analyst to help diagnostic the bicep file if it could be caused by incorrect configuration.
  expected_output: >
    A message to the customer with the question analysis and solution. 
  agent: customer_support